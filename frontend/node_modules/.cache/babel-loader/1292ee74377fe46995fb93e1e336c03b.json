{"ast":null,"code":"var _jsxFileName = \"G:\\\\code\\\\ecommerce\\\\frontend\\\\src\\\\screens\\\\ProfileScreen.js\";\nimport './ProfileScreen.css';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport FormContainer from \"../components/FormContainer\";\nimport { getUserDetails } from \"../actions/userActions\";\nimport \"./RegisterScreen.css\";\nimport { Box, Button, Grid } from '@material-ui/core';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\n\nconst ProfileScreen = ({\n  location,\n  history\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState(null);\n  const dispatch = useDispatch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    loading,\n    error,\n    user\n  } = userDetails;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    } else {\n      if (!userInfo.name) {\n        dispatch(getUserDetails('profile'));\n      } else {\n        console.log(user.name);\n        setName(user.name);\n        setEmail(user.email);\n      }\n    }\n  }, [dispatch, history, userInfo, user]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      setMessage(\"Passwords do not match\");\n    } else {// Dispatch update profile\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: \"profile__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ValidatorForm, {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  }, \"User Profile\"), message && /*#__PURE__*/React.createElement(Message, {\n    severity: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 37\n    }\n  }, message), error && /*#__PURE__*/React.createElement(Message, {\n    severity: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 35\n    }\n  }, error), loading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    label: \"Full Name\",\n    onChange: e => setName(e.target.value),\n    name: \"name\",\n    value: name // validators={['required']}\n    // errorMessages={['this field is required']}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    label: \"Email\",\n    onChange: e => setEmail(e.target.value),\n    name: \"email\",\n    value: email // validators={['required', 'isEmail']}\n    // errorMessages={['this field is required', 'email is not valid']}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    label: \"Password\",\n    onChange: e => setPassword(e.target.value),\n    name: \"password\",\n    type: \"password\",\n    value: password // validators={['required']}\n    // errorMessages={['this field is required']}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(TextValidator, {\n    label: \"Confirm Password\",\n    onChange: e => setConfirmPassword(e.target.value),\n    name: \"confirmPassword\",\n    type: \"password\",\n    value: confirmPassword // validators={['isPasswordMatch', 'required']}\n    // errorMessages={['password mismatch', 'this field is required']}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 25\n    }\n  }, \"Update\")))), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, \"My Orders\")));\n};\n\nexport default ProfileScreen;","map":{"version":3,"sources":["G:/code/ecommerce/frontend/src/screens/ProfileScreen.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Message","Loader","FormContainer","getUserDetails","Box","Button","Grid","ValidatorForm","TextValidator","ProfileScreen","location","history","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","dispatch","userDetails","state","loading","error","user","userLogin","userInfo","push","console","log","submitHandler","e","preventDefault","target","value"],"mappings":"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","sourcesContent":["import './ProfileScreen.css'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport Message from \"../components/Message\"\r\nimport Loader from \"../components/Loader\"\r\nimport FormContainer from \"../components/FormContainer\"\r\nimport { getUserDetails } from \"../actions/userActions\"\r\nimport \"./RegisterScreen.css\"\r\nimport { Box, Button, Grid } from '@material-ui/core'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\n\r\n\r\nconst ProfileScreen = ({ location, history }) => {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!userInfo.name) {\r\n                dispatch(getUserDetails('profile'))\r\n            } else {\r\n                console.log(user.name)\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (password !== confirmPassword) {\r\n            setMessage(\"Passwords do not match\")\r\n        } else {\r\n            // Dispatch update profile\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Grid container className=\"profile__container\">\r\n            <Box>\r\n                <FormContainer>\r\n                    <ValidatorForm onSubmit={submitHandler}>\r\n                        <h2>User Profile</h2>\r\n                        {message && <Message severity='error'>{message}</Message>}\r\n                        {error && <Message severity='error'>{error}</Message>}\r\n                        {loading && <Loader />}\r\n                        <TextValidator\r\n                            label=\"Full Name\"\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            name=\"name\"\r\n                            value={name}\r\n                        // validators={['required']}\r\n                        // errorMessages={['this field is required']}\r\n                        ></TextValidator>\r\n\r\n                        <TextValidator\r\n                            label=\"Email\"\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            name=\"email\"\r\n                            value={email}\r\n                        // validators={['required', 'isEmail']}\r\n                        // errorMessages={['this field is required', 'email is not valid']}\r\n                        ></TextValidator>\r\n\r\n                        <TextValidator\r\n                            label=\"Password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            value={password}\r\n                        // validators={['required']}\r\n                        // errorMessages={['this field is required']}\r\n                        ></TextValidator>\r\n\r\n                        <TextValidator\r\n                            label=\"Confirm Password\"\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            name=\"confirmPassword\"\r\n                            type=\"password\"\r\n                            value={confirmPassword}\r\n                        // validators={['isPasswordMatch', 'required']}\r\n                        // errorMessages={['password mismatch', 'this field is required']}\r\n                        ></TextValidator>\r\n                        <br />\r\n                        <Button\r\n                            color=\"secondary\"\r\n                            variant=\"contained\"\r\n                            type=\"submit\">\r\n                            Update\r\n                </Button>\r\n                    </ValidatorForm>\r\n                </FormContainer>\r\n            </Box>\r\n            <Box>\r\n                <h2>My Orders</h2>\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n\r\n"]},"metadata":{},"sourceType":"module"}